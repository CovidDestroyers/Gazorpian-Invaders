{"version":3,"sources":["webpack://gazorpian-invaders/./public/js/auth/authMe.js"],"names":["addFailureAlert","attrId","message","$","append","getInputValue","elementId","val","postSignUpData","url","username","password","confirmPassword","axios","post","postIt","postLoginData","addWarningAlert","replaceContent","innerContent","html","addSpinner","addCardBody","score"],"mappings":"wNASMA,G,UAAkB,SACtBC,GAEG,IADHC,EACG,uDADO,mDAEV,OAAOC,EAAE,IAAD,OAAKF,IAAUG,OAAhB,2HAC0DF,EAD1D,gLAWHG,EAAgB,SAACC,GAErB,OAD0BH,EAAE,IAAD,OAAKG,IAAaC,OAiCzCC,EAAc,kDAAG,WAAOC,GAAP,mGACfC,EAAWL,EAAc,gBACzBM,EAAWN,EAAc,mBACzBO,EAAkBP,EAAc,oBAHjB,kBAMEQ,MAAMC,KAAKL,EAAK,CACnCC,WACAC,WACAC,oBATiB,cAMbG,EANa,yBAYZA,GAZY,yCAcnBf,EAAgB,cAdG,kFAAH,sDAyBdgB,EAAa,kDAAG,WAAOP,GAAP,iGACdC,EAAWL,EAAc,YACzBM,EAAWN,EAAc,YAFX,kBAKGQ,MAAMC,KAAKL,EAAK,CACnCC,WACAC,aAPgB,cAKZI,EALY,yBAUXA,GAVW,uCAalBf,EAAgB,aAbE,iFAAH,sDAuCbiB,EAAkB,SAAChB,GAAiC,IAAzBC,EAAyB,uDAAf,WACzC,OAAOC,EAAE,IAAD,OAAKF,IAAUG,OAAhB,6FAC2BF,EAD3B,+KAWHgB,EAAiB,SAACjB,EAAQkB,GAC9B,OAAOhB,EAAE,IAAD,OAAKF,IAAUmB,KAAhB,UAAwBD,KA8B3BE,EAAa,SAACpB,GAClB,OAAOE,EAAE,IAAD,OAAKF,IAAUmB,KAAhB,uGAKHE,EAAc,SAACrB,EAAQS,EAAUa,GACrC,OAAOpB,EAAE,IAAD,OAAKF,IAAUmB,KAAhB,0GAE4CV,EAF5C,yHAG+Fa,EAH/F","file":"763.6486a876bba916d99c32.js","sourcesContent":["/* eslint-disable import/extensions, no-undef */\nimport 'regenerator-runtime/runtime.js';\n\n/**\n *\n * @param {string} attrId\n * @param {string} message\n * @returns {void | jQuery}\n */\nconst addFailureAlert = (\n  attrId,\n  message = 'Something failed. Please retry in a few minutes.'\n) => {\n  return $(`#${attrId}`).append(`<div class=\"alert alert-danger alert-rounded\">\n                                  <strong> OH NOOOOO! </strong>  ${message}\n                                  <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"> <span aria-hidden=\"true\">&times;</span> </button> </div>`);\n};\n\n/**\n * Gets the value in an input field (text, dropdowns, etc.) and trims the\n * white space.\n * @param {string} elementId\n * @returns {string}\n */\nconst getInputValue = (elementId) => {\n  const trimmedWhiteSpace = $(`#${elementId}`).val();\n  return trimmedWhiteSpace;\n};\n\n/**\n * Builds an Object\n * @param elementIdArray\n * @returns {{}}\n */\nconst buildObject = (elementIdArray) => {\n  const formData = {};\n\n  for (let i = 0; i < elementIdArray.length; i += 1) {\n    const key = elementIdArray[i];\n    const keyValue = getInputValue(key).trim();\n\n    Object.defineProperty(formData, key, {\n      value: keyValue,\n      configurable: false,\n      writable: true,\n      enumerable: true\n    });\n  }\n\n  return formData;\n};\n\n/**\n * Posts It\n * @param {String} url\n * @param {Array} elementIdArray\n * @returns {Promise<*>}\n */\nconst postSignUpData = async (url) => {\n  const username = getInputValue('new-username');\n  const password = getInputValue('signup-password');\n  const confirmPassword = getInputValue('confirm-password');\n\n  try {\n    const postIt = await axios.post(url, {\n      username,\n      password,\n      confirmPassword\n    });\n\n    return postIt;\n  } catch (error) {\n    addFailureAlert('signupForm');\n    return error;\n  }\n};\n\n/**\n * Posts Login\n * @param {String} url\n * @param {Array} elementIdArray\n * @returns {Promise<*>}\n */\nconst postLoginData = async (url) => {\n  const username = getInputValue('username');\n  const password = getInputValue('password');\n\n  try {\n    const postIt = await axios.post(url, {\n      username,\n      password\n    });\n\n    return postIt;\n  } catch (error) {\n    // console.log(error);\n    addFailureAlert('loginForm');\n    return error;\n  }\n};\n/**\n *\n * @param eleToWatch\n * @param {array} elesToClear\n * @returns {void | jQuery}\n */\nconst clearInputOnClick = (eleToWatch, ...elesToClear) => {\n  return $(`#${eleToWatch}`).click((event) => {\n    event.preventDefault();\n\n    for (let i = 0; i < elesToClear.length; i += 1) {\n      $(`#${elesToClear[i]}`).val('');\n    }\n  });\n};\n\n/**\n *\n * @param {string} attrId\n * @param {string} message\n * @returns {void | jQuery}\n */\nconst addWarningAlert = (attrId, message = 'Warning!') => {\n  return $(`#${attrId}`).append(`<div class=\"alert alert-warning alert-rounded\">\n                                  ${message}\n                                  <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"> <span aria-hidden=\"true\">&times;</span> </button> </div>`);\n};\n\n/**\n * Replaces the Content of an HTML Element\n * @param {string} attrId\n * @param {string} innerContent\n * @returns {*|void|jQuery}\n */\nconst replaceContent = (attrId, innerContent) => {\n  return $(`#${attrId}`).html(`${innerContent}`);\n};\n\n/**\n * Checks Passswords match\n * @param passwordId\n * @param confirmPwdId\n * @returns {boolean}\n */\nconst checkPasswordsMatch = (passwordId, confirmPwdId) => {\n  const mainPwd = getInputValue(passwordId);\n  const confirmPwd = getInputValue(confirmPwdId);\n\n  let doPwdMatch;\n\n  if (mainPwd !== confirmPwd) {\n    doPwdMatch = false;\n  } else {\n    doPwdMatch = true;\n  }\n\n  return doPwdMatch;\n};\n\n/**\n * Adds a spinner after the\n *\n * @param {string} attrId\n * @returns {*|void|jQuery}\n */\nconst addSpinner = (attrId) => {\n  return $(`#${attrId}`).html(\n    `<span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> Working...`\n  );\n};\n\nconst addCardBody = (attrId, username, score) => {\n  return $(`#${attrId}`).html(\n    `<div id=\"user-card-body\" class=\"card-body\">\n                    <h5 class=\"card-title\">Welcome ${username}!</h5>\n                    <p class=\"card-text\"> Your most recent score is: <span style=\"color: darkorange\"> ${score} </span> </p>\n                </div>`\n  );\n};\nexport {\n  clearInputOnClick,\n  addWarningAlert,\n  checkPasswordsMatch,\n  getInputValue,\n  replaceContent,\n  postSignUpData,\n  buildObject,\n  addFailureAlert,\n  addSpinner,\n  postLoginData,\n  addCardBody\n};\n"],"sourceRoot":""}